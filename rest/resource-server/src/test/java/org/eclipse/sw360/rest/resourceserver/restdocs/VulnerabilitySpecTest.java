/*
 * Copyright Siemens AG, 2018. Part of the SW360 Portal Project.
 *
  * This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 */

package org.eclipse.sw360.rest.resourceserver.restdocs;

import org.eclipse.sw360.datahandler.thrift.users.User;
import org.eclipse.sw360.datahandler.thrift.vulnerabilities.Vulnerability;
import org.eclipse.sw360.rest.resourceserver.TestHelper;
import org.eclipse.sw360.rest.resourceserver.user.Sw360UserService;
import org.eclipse.sw360.rest.resourceserver.vulnerability.Sw360VulnerabilityService;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.hateoas.MediaTypes;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;

import static org.mockito.BDDMockito.given;
import static org.mockito.Matchers.anyObject;
import static org.mockito.Matchers.eq;
import static org.springframework.restdocs.hypermedia.HypermediaDocumentation.linkWithRel;
import static org.springframework.restdocs.hypermedia.HypermediaDocumentation.links;
import static org.springframework.restdocs.payload.PayloadDocumentation.fieldWithPath;
import static org.springframework.restdocs.payload.PayloadDocumentation.responseFields;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringJUnit4ClassRunner.class)
public class VulnerabilitySpecTest extends TestRestDocsSpecBase {

    @Value("${sw360.test-user-id}")
    private String testUserId;

    @Value("${sw360.test-user-password}")
    private String testUserPassword;

    @MockBean
    private Sw360VulnerabilityService vulnerabilityServiceMock;

    @MockBean
    private Sw360UserService userServiceMock;

    private Vulnerability vulnerability;

    @Before
    public void before() {
        vulnerability = new Vulnerability();
        vulnerability.setId("12345");
        vulnerability.setAction("new");
        vulnerability.setCwe("common weakness enumeration");
        vulnerability.setDescription("Description of vulnerability");
        vulnerability.setExternalId("123");
        vulnerability.setPriority("high");
        vulnerability.setTitle("Title of vulnerability 12345");
        vulnerability.setRevision("1");
        vulnerability.setCvss(3);
        vulnerability.setReferences(new HashSet<>(Arrays.asList("reference-1", "reference-2")));
        vulnerability.setPublishDate("01-01-2018");
        vulnerability.setLastExternalUpdate("last-update-id-123");

        Vulnerability vulnerability2 = new Vulnerability();
        vulnerability2.setId("7854");
        vulnerability2.setAction("remove");
        vulnerability2.setCwe("common weakness enumeration");
        vulnerability2.setDescription("Description of vulnerability");
        vulnerability2.setExternalId("7543");
        vulnerability2.setPriority("low");
        vulnerability2.setTitle("Title of vulnerability 7854");
        vulnerability2.setRevision("2");
        vulnerability2.setCvss(4);

        List<Vulnerability> vulnerabilityList = new ArrayList<>();
        vulnerabilityList.add(vulnerability);
        vulnerabilityList.add(vulnerability2);

        User user = new User();
        user.setId("123456789");
        user.setEmail("admin@sw360.org");
        user.setFullname("John Doe");

        given(this.userServiceMock.getUserByEmailOrExternalId("admin@sw360.org")).willReturn(user);

        given(this.vulnerabilityServiceMock.getVulnerabilities(anyObject())).willReturn(vulnerabilityList);
        given(this.vulnerabilityServiceMock.getVulnerabilityByExternalId(eq(vulnerability.getExternalId()), anyObject())).willReturn(vulnerability);
    }

    @Test
    public void should_document_get_vulnerabilities() throws Exception {
        String accessToken = TestHelper.getAccessToken(mockMvc, testUserId, testUserPassword);
        mockMvc.perform(get("/api/vulnerabilities")
                .header("Authorization", "Bearer " + accessToken)
                .accept(MediaTypes.HAL_JSON))
                .andExpect(status().isOk())
                .andDo(this.documentationHandler.document(
                        links(
                                linkWithRel("curies").description("Curies are used for online documentation")
                        ),
                        responseFields(
                                fieldWithPath("_embedded.sw360:vulnerabilities[]title").description("The title of the vulnerability"),
                                fieldWithPath("_embedded.sw360:vulnerabilities[]externalId").description("The external Id of the vulnerability"),
                                fieldWithPath("_embedded.sw360:vulnerabilities").description("An array of <<resources-vulnerabilities, Vulnerabilities resources>>"),
                                fieldWithPath("_links").description("<<resources-index-links,Links>> to other resources")
                        )));
    }

    @Test
    public void should_document_get_vulnerability() throws Exception {
        String accessToken = TestHelper.getAccessToken(mockMvc, testUserId, testUserPassword);
        mockMvc.perform(get("/api/vulnerabilities/" + vulnerability.getExternalId())
                .header("Authorization", "Bearer " + accessToken)
                .accept(MediaTypes.HAL_JSON))
                .andExpect(status().isOk())
                .andDo(this.documentationHandler.document(
                        links(
                                linkWithRel("self").description("The <<resources-vulnerabilities, Vulnerabilities resource>>")
                        ),
                        responseFields(
                                fieldWithPath("title").description("The title of the vulnerability"),
                                fieldWithPath("description").description("The vulnerability description"),
                                fieldWithPath("externalId").description("The external Id"),
                                fieldWithPath("cwe").description("The CWE (Common Weakness Enumeration) value"),
                                fieldWithPath("_links").description("<<resources-index-links,Links>> to other resources")
                        )));
    }
}
