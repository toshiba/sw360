/*
 * Copyright Bosch Software Innovations GmbH, 2017.
 * Part of the SW360 Portal Project.
 *
 * This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 */
package org.eclipse.sw360.rest.resourceserver.vulnerability;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import org.apache.thrift.TException;
import org.apache.thrift.protocol.TCompactProtocol;
import org.apache.thrift.protocol.TProtocol;
import org.apache.thrift.transport.THttpClient;
import org.apache.thrift.transport.TTransportException;
import org.eclipse.sw360.datahandler.common.CommonUtils;
import org.eclipse.sw360.datahandler.permissions.VulnerabilityPermissions;
import org.eclipse.sw360.datahandler.thrift.RequestStatus;
import org.eclipse.sw360.datahandler.thrift.users.User;
import org.eclipse.sw360.datahandler.thrift.vulnerabilities.ProjectVulnerabilityRating;
import org.eclipse.sw360.datahandler.thrift.vulnerabilities.Vulnerability;
import org.eclipse.sw360.datahandler.thrift.vulnerabilities.VulnerabilityCheckStatus;
import org.eclipse.sw360.datahandler.thrift.vulnerabilities.VulnerabilityDTO;
import org.eclipse.sw360.datahandler.thrift.vulnerabilities.VulnerabilityRatingForProject;
import org.eclipse.sw360.datahandler.thrift.vulnerabilities.VulnerabilityService;
import org.eclipse.sw360.datahandler.thrift.vulnerabilities.VulnerabilityWithReleaseRelations;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Service
@Slf4j
@RequiredArgsConstructor(onConstructor = @__(@Autowired))
public class Sw360VulnerabilityService {
    @Value("${sw360.thrift-server-url:http://localhost:8080}")
    private String thriftServerUrl;

    public List<Vulnerability> getVulnerabilities(User sw360User) {
        try {
            VulnerabilityService.Iface sw360VulnerabilityClient = getThriftVulnerabilityClient();
            return sw360VulnerabilityClient.getVulnerabilities(sw360User);
        } catch (TException e) {
            throw new RuntimeException(e);
        }
    }

    public Vulnerability getVulnerabilityByExternalId(String externalId, User sw360User) {
        try {
            VulnerabilityService.Iface sw360VulnerabilityClient = getThriftVulnerabilityClient();
            return sw360VulnerabilityClient.getVulnerabilityByExternalId(externalId, sw360User);
        } catch (TException e) {
            throw new RuntimeException(e);
        }
    }

    public Vulnerability getVulnerabilityWithReleaseRelationsByExternalId(String externalId, User sw360User) {
        try {
            VulnerabilityService.Iface sw360VulnerabilityClient = getThriftVulnerabilityClient();
            final VulnerabilityWithReleaseRelations vulWithRel = sw360VulnerabilityClient.getVulnerabilityWithReleaseRelationsByExternalId(externalId, sw360User);
            return vulWithRel.getVulnerability();
        } catch (TException e) {
            throw new RuntimeException(e);
        }
    }

    public List<VulnerabilityDTO> getVulnerabilitiesByReleaseId(String releaseId, User sw360User) {
        try {
            VulnerabilityService.Iface sw360VulnerabilityClient = getThriftVulnerabilityClient();
            return sw360VulnerabilityClient.getVulnerabilitiesByReleaseId(releaseId, sw360User);
        } catch (TException e) {
            throw new RuntimeException(e);
        }
    }

    public List<VulnerabilityDTO> getVulnerabilitiesByProjectId(String projectId, User sw360User) {
        try {
            VulnerabilityService.Iface sw360VulnerabilityClient = getThriftVulnerabilityClient();
            return sw360VulnerabilityClient.getVulnerabilitiesByProjectId(projectId, sw360User);
        } catch (TException e) {
            throw new RuntimeException(e);
        }
    }

    private VulnerabilityService.Iface getThriftVulnerabilityClient() throws TTransportException {
        THttpClient thriftClient = new THttpClient(thriftServerUrl + "/vulnerabilities/thrift");
        TProtocol protocol = new TCompactProtocol(thriftClient);
        return new VulnerabilityService.Client(protocol);
    }

    public RequestStatus updateProjectVulnerabilityRating(ProjectVulnerabilityRating projVulRatings, User sw360User) {
        try {
            VulnerabilityService.Iface sw360VulnerabilityClient = getThriftVulnerabilityClient();
            return sw360VulnerabilityClient.updateProjectVulnerabilityRating(projVulRatings, sw360User);
        } catch (TException e) {
            throw new RuntimeException(e);
        }
    }

    public List<ProjectVulnerabilityRating> getProjectVulnerabilityRatingByProjectId(String projectId, User sw360User) {
        try {
            VulnerabilityService.Iface sw360VulnerabilityClient = getThriftVulnerabilityClient();
            return sw360VulnerabilityClient.getProjectVulnerabilityRatingByProjectId(projectId, sw360User);
        } catch (TException e) {
            throw new RuntimeException(e);
        }
    }

    public Map<String, Map<String, VulnerabilityRatingForProject>> fillVulnerabilityMetadata(VulnerabilityDTO vulnDto,
            Optional<ProjectVulnerabilityRating> projectVulnerabilityRating) {
        Map<String, Map<String, List<VulnerabilityCheckStatus>>> vulnerabilityIdToStatusHistory = projectVulnerabilityRating
                .map(ProjectVulnerabilityRating::getVulnerabilityIdToReleaseIdToStatus).orElseGet(HashMap::new);

        Map<String, Map<String, VulnerabilityRatingForProject>> vulnerabilityRatings = new HashMap<>();

        String vulnerabilityId = vulnDto.getExternalId();
        String releaseId = vulnDto.getIntReleaseId();
        if (!vulnerabilityRatings.containsKey(vulnerabilityId)) {
            vulnerabilityRatings.put(vulnerabilityId, new HashMap<>());
        }
        List<VulnerabilityCheckStatus> vulnerabilityCheckStatusHistory = null;
        if (vulnerabilityIdToStatusHistory.containsKey(vulnerabilityId)
                && vulnerabilityIdToStatusHistory.get(vulnerabilityId).containsKey(releaseId)) {
            vulnerabilityCheckStatusHistory = vulnerabilityIdToStatusHistory.get(vulnerabilityId).get(releaseId);
        }
        if (CommonUtils.isNotEmpty(vulnerabilityCheckStatusHistory)) {

            VulnerabilityCheckStatus vulnerabilityCheckStatus = vulnerabilityCheckStatusHistory
                    .get(vulnerabilityCheckStatusHistory.size() - 1);
            VulnerabilityRatingForProject rating = vulnerabilityCheckStatus.getVulnerabilityRating();
            vulnerabilityRatings.get(vulnerabilityId).put(releaseId, rating);
        } else {
            vulnerabilityRatings.get(vulnerabilityId).put(releaseId, VulnerabilityRatingForProject.NOT_CHECKED);
        }

        return vulnerabilityRatings;
    }
}
