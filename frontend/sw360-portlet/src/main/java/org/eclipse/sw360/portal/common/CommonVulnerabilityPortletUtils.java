/*
 * Copyright Siemens AG, 2013-2016. Part of the SW360 Portal Project.
 * With contributions by Bosch Software Innovations GmbH, 2016.
 *
 * This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 */
package org.eclipse.sw360.portal.common;

import com.google.common.base.MoreObjects;
import com.google.common.collect.Ordering;
import org.eclipse.sw360.datahandler.thrift.users.User;
import org.eclipse.sw360.datahandler.thrift.vulnerabilities.VulnerabilityDTO;
import org.jetbrains.annotations.NotNull;

import javax.portlet.RenderRequest;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

import static org.eclipse.sw360.portal.common.PortalConstants.CUSTOM_FIELD_VULNERABILITIES_VIEW_SIZE;

public class CommonVulnerabilityPortletUtils {

    private static final Ordering<VulnerabilityDTO> VULNERABILITY_DTO_ORDERING = Ordering.from(Comparator.comparing(VulnerabilityDTO::getLastExternalUpdate, Comparator.nullsFirst(Comparator.naturalOrder())));

    @NotNull
    public static <T> String formatedMessageForVul(List<T> history,
                                                   Function<T,String> valueGetter,
                                                   Function<T,String> dateGetter,
                                                   Function<T,String> authorGetter,
                                                   Function<T,String> commentGetter){
        StringBuffer sb = new StringBuffer();
        String htmlClassPrefix = "formatedMessageForVul";
        sb.append("<ol reversed class=\"" + htmlClassPrefix + "\">");
        int maxIndexOfHistory = history.size() - 1;
        IntStream.rangeClosed(0, maxIndexOfHistory)
                .mapToObj(i -> history.get(maxIndexOfHistory - i))
                .forEach(historyElement -> sb.append(
                        "<li class=\"" + htmlClassPrefix + "Item\">" +
                        "<span class=\"" + htmlClassPrefix + "Head\"><b>" + valueGetter.apply(historyElement) +
                        "</b> <span class=\"" + htmlClassPrefix + "Date\">(" + dateGetter.apply(historyElement) +
                        ")</span></span><br/><span class=\"" + htmlClassPrefix + "CheckedBy\"><b>" + authorGetter.apply(historyElement) +
                        "</b></span><br/><span class=\"" + htmlClassPrefix + "Comment\">" + commentGetter.apply(historyElement) +
                        "</span></li>"));
        sb.append("</ol>");
        return sb.toString();
    }

    public static void putLatestVulnerabilitiesInRequest(RenderRequest request, List<VulnerabilityDTO> vuls, User user) {
        int limit = CustomFieldHelper.loadAndStoreStickyViewSize(request, user, CUSTOM_FIELD_VULNERABILITIES_VIEW_SIZE);
        List<VulnerabilityDTO> lastestVuls = limit > 0
                ? VULNERABILITY_DTO_ORDERING.greatestOf(vuls, limit)
                : VULNERABILITY_DTO_ORDERING.immutableSortedCopy(vuls);

        request.setAttribute(PortalConstants.NUMBER_OF_VULNERABILITIES, vuls.size());
        request.setAttribute(PortalConstants.VULNERABILITY_LIST, lastestVuls);
    }

    public static void putMatchedByHistogramInRequest(RenderRequest request, List<VulnerabilityDTO> vuls) {
        Map<String, Long> matchedByHistogram = vuls.stream()
                .map(vul -> MoreObjects.firstNonNull(vul.getMatchedBy(), "UNKNOWN"))
                .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));

        request.setAttribute(PortalConstants.VULNERABILITY_MATCHED_BY_HISTOGRAM, matchedByHistogram);
    }
}
